Raytracer assignment
To calculate phong shading, the shade method of a Pointlight object takes a ray and at the point of the ray's intersection to find a light ray direction, intersection to eye reflection direction to calculate the light interaction with the material. Then add the diffuse, ambient and specular intensities.
To calculate intersection of any object I first created a new ray of the origin and direction transformed worldtoModel view. For the square I checked if it was parallel to the plane, if parallel return false else return whether the x and y is within 0.5 and -0.5 and set ray to proper values. For sphere I got the quadratic coefficents to find if there was an intersection. If 1 intersection then i set ray accordingly else if 2 I set ray according to the closer intersection to the transformed worldtomodel view. To calculate the cylinder i first checked if the ray intersected within the cylinderical side if it was infinite. If it does then i checked if it intersects at the y axis of 0.5 and -0.5. If 1 intersect or none intersect check if it intersects with circle face of the top and bottom. If it does then take the first intersection. If it hits the cylnderical side twice then take the first intersection and set the ray accordingly.
Refleciton was done by if it hit a surface, take the reflective constant and multiply by the new ray of the reflection taht it hits, so it recursively creates the color for reflection. Shadows was done if light hit a surface create a new ray 0.01 distance away with the same direction to see if it hits another object, if it does add a shade color to it.
Antialiasing was done through supersampling, I rendered the view with twice as many rays in the same amount of screen view and averaged each pixel to get super sampled antialiasing.
Depth of view was done through jittering the origin camera by 0.01 in x,y,z directions and averaging the colors (blurred effect occurs the further away).
Added a new material silver found properties of silver online.